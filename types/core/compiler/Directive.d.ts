import CustomDirective from "../../definitions/types/CustomDirective";
import Bouer from "../../instance/Bouer";
import Binder from "../binder/Binder";
import CommentHandler from "../CommentHandler";
import DelimiterHandler from "../DelimiterHandler";
import Evaluator from "../Evaluator";
import EventHandler from "../event/EventHandler";
import Compiler from "./Compiler";
export default class Directive {
    bouer: Bouer;
    binder: Binder;
    evaluator: Evaluator;
    compiler: Compiler;
    comment: CommentHandler;
    eventHandler: EventHandler;
    delimiter: DelimiterHandler;
    $custom: CustomDirective;
    context: object;
    constructor(customDirective: CustomDirective, compiler: Compiler, compilerContext: object);
    toOwnerNode(node: Node): any;
    errorMsgEmptyNode: (node: Node) => string;
    errorMsgNodeValue: (node: Node) => string;
    skip(node: Element): void;
    if(node: Node, data: object): void;
    show(node: Node, data: object): void;
    for(node: Node, data: object): void;
    def(node: Node, data: object): void;
    content(node: Node): void;
    bind(node: Node, data: object): void;
    property(node: Node, data: object): void;
    data(node: Node, data: object): void | Element;
    href(node: Node, data: object): void;
    entry(node: Node, data: object): void;
    put(node: Node, data: object): void;
    req(node: Node, data: object): void;
    wait(node: Node): void | {
        nodes: any[];
    };
    custom(node: Node, data: object): boolean;
    skeleton(node: Node): void;
}
