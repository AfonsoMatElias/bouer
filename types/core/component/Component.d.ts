import IComponent from "../../definitions/interfaces/IComponent";
import ILifeCycleHooks from "../../definitions/interfaces/ILifeCycleHooks";
import dynamic from "../../definitions/types/Dynamic";
import EventSubscription from "../../definitions/types/EventSubscription";
import Bouer from "../../instance/Bouer";
export default class Component implements IComponent {
    name: string;
    path: string;
    data?: object;
    template?: string;
    keepAlive?: boolean;
    prefetch?: boolean;
    title?: string;
    route?: string;
    isDefault?: boolean;
    isNotFound?: boolean;
    el?: Element;
    bouer?: Bouer;
    children?: (Component | IComponent)[];
    assets: (HTMLScriptElement | HTMLStyleElement | HTMLLinkElement)[];
    restrictions?: ((component: (Component | IComponent)) => boolean | Promise<boolean>)[];
    private events;
    requested?(event: CustomEvent): void;
    created?(event: CustomEvent): void;
    beforeMount?(event: CustomEvent): void;
    mounted?(event: CustomEvent): void;
    beforeLoad?(event: CustomEvent): void;
    loaded?(event: CustomEvent): void;
    beforeDestroy?(event: CustomEvent): void;
    destroyed?(event: CustomEvent): void;
    blocked?(event: CustomEvent): void;
    failed?(event: CustomEvent): void;
    constructor(optionsOrPath: string | IComponent);
    export(options: object): void;
    destroy(): false | undefined;
    params(): dynamic;
    emit<TKey extends keyof ILifeCycleHooks>(eventName: TKey, init?: CustomEventInit): void;
    on<TKey extends keyof ILifeCycleHooks>(eventName: TKey, callback: (event: CustomEvent) => void): EventSubscription;
    off<TKey extends keyof ILifeCycleHooks>(eventName: TKey, callback: (event: CustomEvent) => void): void;
    addAssets(assets: {
        type: string;
        src: string;
        scoped: boolean;
    }[]): void;
}
